Key: variable2 -> Values: 
) 

Key: assignOp -> Values: 
intnum 
floatnum 
( 
not 
id 
self 
+ 
- 

Key: rept-statement3 -> Values: 
if 
while 
read 
write 
return 
self 
id 
local 
} 
else 
; 

Key: rept-statement4 -> Values: 
if 
while 
read 
write 
return 
self 
id 
local 
} 
else 
; 

Key: rept-factor4 -> Values: 
* 
/ 
and 
+ 
- 
or 
== 
<> 
< 
> 
<= 
>= 
, 
) 
] 
; 

Key: rept-factor -> Values: 
* 
/ 
and 
+ 
- 
or 
== 
<> 
< 
> 
<= 
>= 
, 
) 
] 
; 

Key: rept-fParams4 -> Values: 
) 

Key: rept-fParams3 -> Values: 
, 
) 

Key: localVarDeclOrStat -> Values: 
local 
if 
while 
read 
write 
return 
self 
id 
} 

Key: START -> Values: 
$ 

Key: relOp -> Values: 
intnum 
floatnum 
( 
not 
id 
self 
+ 
- 

Key: variable3 -> Values: 
) 

Key: funcDef -> Values: 
function 
constructor 
} 
class 
implementation 
$ 

Key: statBlock -> Values: 
else 
; 

Key: classDecl -> Values: 
class 
implementation 
function 
constructor 
$ 

Key: rept-prog0 -> Values: 
$ 

Key: opt-classDecl2 -> Values: 
{ 

Key: expr -> Values: 
, 
) 
; 

Key: expr2 -> Values: 
, 
) 
; 

Key: funcBody -> Values: 
function 
constructor 
} 
class 
implementation 
$ 

Key: returnType -> Values: 
; 
{ 

Key: prog -> Values: 
$ 

Key: arithExpr -> Values: 
== 
<> 
< 
> 
<= 
>= 
, 
) 
] 
; 

Key: rept-classDecl4 -> Values: 
} 

Key: varDecl -> Values: 
public 
private 
} 
local 
if 
while 
read 
write 
return 
self 
id 

Key: fParamsTail -> Values: 
, 
) 

Key: arraySize2 -> Values: 
[ 
, 
) 
; 

Key: rept-variable2 -> Values: 
. 
:= 
) 
* 
/ 
and 
+ 
- 
or 
== 
<> 
< 
> 
<= 
>= 
, 
] 
; 

Key: aParams -> Values: 
) 

Key: fParams -> Values: 
) 

Key: classOrImplOrFunc -> Values: 
class 
implementation 
function 
constructor 
$ 

Key: rightrec-term -> Values: 
+ 
- 
or 
== 
<> 
< 
> 
<= 
>= 
, 
) 
] 
; 

Key: rept-fParamsTail4 -> Values: 
, 
) 

Key: rept-aParams1 -> Values: 
) 

Key: arraySize -> Values: 
[ 
, 
) 
; 

Key: term -> Values: 
+ 
- 
or 
== 
<> 
< 
> 
<= 
>= 
, 
) 
] 
; 

Key: indice -> Values: 
[ 
. 
:= 
) 
* 
/ 
and 
+ 
- 
or 
== 
<> 
< 
> 
<= 
>= 
, 
] 
; 

Key: rept-varDecl3 -> Values: 
; 

Key: rightrec-arithExpr -> Values: 
== 
<> 
< 
> 
<= 
>= 
, 
) 
] 
; 

Key: statement -> Values: 
if 
while 
read 
write 
return 
self 
id 
local 
} 
else 
; 

Key: rept-factor2 -> Values: 
* 
/ 
and 
+ 
- 
or 
== 
<> 
< 
> 
<= 
>= 
, 
) 
] 
; 

Key: factor -> Values: 
* 
/ 
and 
+ 
- 
or 
== 
<> 
< 
> 
<= 
>= 
, 
) 
] 
; 

Key: rept-statBlock1 -> Values: 
} 

Key: idnest2 -> Values: 
id 
self 

Key: rept-factor3 -> Values: 
* 
/ 
and 
+ 
- 
or 
== 
<> 
< 
> 
<= 
>= 
, 
) 
] 
; 

Key: rept-funcBody1 -> Values: 
} 

Key: funcHead -> Values: 
; 
{ 

Key: rept-implDef3 -> Values: 
} 

Key: aParamsTail -> Values: 
, 
) 

Key: localVarDecl -> Values: 
local 
if 
while 
read 
write 
return 
self 
id 
} 

Key: implDef -> Values: 
class 
implementation 
function 
constructor 
$ 

Key: type -> Values: 
[ 
, 
; 
{ 
) 

Key: funcDecl -> Values: 
public 
private 
} 

Key: relExpr -> Values: 
) 

Key: sign -> Values: 
intnum 
floatnum 
( 
not 
id 
self 
+ 
- 

Key: memberDecl -> Values: 
public 
private 
} 

Key: rept-statement -> Values: 
if 
while 
read 
write 
return 
self 
id 
local 
} 
else 
; 

Key: rept-opt-classDecl22 -> Values: 
{ 

Key: attributeDecl -> Values: 
public 
private 
} 

Key: visibility -> Values: 
attribute 
function 
constructor 

Key: rept-statement2 -> Values: 
if 
while 
read 
write 
return 
self 
id 
local 
} 
else 
; 

Key: addOp -> Values: 
intnum 
floatnum 
( 
not 
id 
self 
+ 
- 

Key: multOp -> Values: 
intnum 
floatnum 
( 
not 
id 
self 
+ 
- 

Key: variable -> Values: 
) 

