prog 
rept-prog0 
classOrImplOrFunc rept-prog0 
classDecl rept-prog0 
class id opt-classDecl2 { rept-classDecl4 } ; rept-prog0 
class id opt-classDecl2 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL opt-classDecl2 { rept-classDecl4 } ; rept-prog0 
Syntax error at (2, 18)
class POLYNOMIAL { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { visibility memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public funcDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public funcHead ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function id ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function id ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( id : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => type ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; classOrImplOrFunc rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; classDecl rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class id opt-classDecl2 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class id opt-classDecl2 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR opt-classDecl2 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa id rept-opt-classDecl22 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa id rept-opt-classDecl22 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL rept-opt-classDecl22 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { visibility memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attributeDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute varDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute varDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute id : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; visibility memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attributeDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute varDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute varDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute id : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; visibility memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public funcDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public funcHead ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function id ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function id ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( id : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float fParamsTail rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => type ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => id ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; visibility memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public funcDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public funcHead ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function id ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function id ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( id : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => type ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; classOrImplOrFunc rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; classDecl rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class id opt-classDecl2 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class id opt-classDecl2 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC opt-classDecl2 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa id rept-opt-classDecl22 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa id rept-opt-classDecl22 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL rept-opt-classDecl22 { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { visibility memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attributeDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute varDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute varDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute id : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; visibility memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attributeDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute varDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute varDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute id : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; visibility memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attributeDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute varDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute varDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute id : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : type rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float rept-varDecl3 ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; visibility memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public funcDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public funcHead ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function id ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function id ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( id : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float fParamsTail rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float fParamsTail rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : type rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float rept-fParamsTail4 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => type ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => id ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; visibility memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public memberDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public funcDecl rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public funcHead ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function id ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function id ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( fParams ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( id : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float rept-fParams4 ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => returnType ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => type ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; rept-classDecl4 } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; classOrImplOrFunc rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implDef rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation id { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation id { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { funcDef rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { funcHead funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function id ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function id ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( id : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => type funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( factor rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( intnum rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } classOrImplOrFunc rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implDef rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation id { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation id { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { funcDef rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { funcHead funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function id ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function id ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( id : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => type funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { localVarDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local varDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local varDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local id : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result assignOp expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result assignOp expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result multOp factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x addOp term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result assignOp expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result multOp factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x addOp term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( factor rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( rept-factor rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( id rept-factor2 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result rept-factor2 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result rept-factor4 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } funcDef rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } funcHead funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function id ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function id ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( id : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float fParamsTail rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float fParamsTail rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => type funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => id funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { localVarDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local varDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local varDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local id : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : id rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a assignOp expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b assignOp expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c assignOp expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( factor rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( rept-factor rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( id rept-factor2 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function rept-factor2 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function rept-factor4 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } classOrImplOrFunc rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implDef rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation id { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation id { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { funcDef rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { funcHead funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function id ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function id ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( id : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float fParamsTail rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , id : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : type rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float rept-fParamsTail4 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => type funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => id funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { localVarDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local varDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local varDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local id : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : id rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a assignOp expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b assignOp expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( factor rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( rept-factor rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( id rept-factor2 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function rept-factor2 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function rept-factor4 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } funcDef rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } funcHead funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function id ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function id ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( fParams ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( id : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : type rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float rept-fParams3 rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float rept-fParams4 ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => returnType funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => type funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float funcBody rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { localVarDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local varDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local varDecl rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local id : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : type rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float rept-varDecl3 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result assignOp expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := floatnum rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; rept-statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; id rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result rept-statement2 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result rept-variable2 rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result rept-statement4 rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result assignOp expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := expr ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a multOp factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x addOp term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + rept-factor rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + id rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b rept-factor2 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b rept-factor4 rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b rightrec-term rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b rightrec-arithExpr expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b expr2 ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; localVarDeclOrStat rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; statement rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( expr ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( factor rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( rept-factor rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( id rept-factor2 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result rept-factor2 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result rept-variable2 rept-factor4 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result rept-factor4 rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result rightrec-term rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result rightrec-arithExpr expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result expr2 ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result ) ; rept-funcBody1 } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result ) ; } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result ) ; } rept-implDef3 } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result ) ; } } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result ) ; } } rept-prog0 
class POLYNOMIAL { public function evaluate ( x : float ) => float ; } ; class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public function build ( A : float , B : float ) => LINEAR ; public function evaluate ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public function build ( A : float , B : float , C : float ) => QUADRATIC ; public function evaluate ( x : float ) => float ; } ; implementation POLYNOMIAL { function evaluate ( x : float ) => float { return ( 0 ) ; } } implementation QUADRATIC { function evaluate ( x : float ) => float { local result : float ; result := a ; result := result * x + b ; result := result * x + c ; return ( result ) ; } function build ( A : float , B : float , C : float ) => QUADRATIC { local new_function : QUADRATIC ; new_function . a := A ; new_function . b := B ; new_function . c := C ; return ( new_function ) ; } } implementation LINEAR { function build ( A : float , B : float ) => LINEAR { local new_function : LINEAR ; new_function . a := A ; new_function . b := B ; return ( new_function ) ; } function evaluate ( x : float ) => float { local result : float ; result := 0.0 ; result := a * x + b ; return ( result ) ; } } $ 
Syntax error at (67, 4)
