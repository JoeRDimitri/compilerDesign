[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[{,{,2,18]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[{,{,2,18]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[{,{,2,18]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[{,{,2,18]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[{,{,2,18]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[{,{,2,18]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[{,{,2,18]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[{,{,2,18]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[-,-,2,1]
[-,-,2,3]
[-,-,2,5]
[class,class,2,11]
[id,POLYNOMIAL,2,22]
[{,{,2,24]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[-,-,2,1]
[-,-,2,3]
[-,-,2,5]
[class,class,2,11]
[id,POLYNOMIAL,2,22]
[{,{,2,24]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,20]
[-,-,2,22]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,20]
[-,-,2,22]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,20]
[-,-,2,22]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,20]
[-,-,2,22]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[id,func,67,4]
[id,main,67,9]
[(,(,67,10]
[),),67,11]
[=>,=>,67,14]
[void,void,67,19]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[invalidnum,2.0,73,21]
[,,,,73,22]
[invalidnum,1.0,73,26]
[,,,,73,27]
[floatnum,0.0,73,31]
[),),73,32]
[;,;,73,33]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,counter,78,17]
[),),78,18]
[;,;,78,19]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,evaluate,79,21]
[(,(,79,22]
[id,counter,79,29]
[),),79,30]
[),),79,31]
[;,;,79,32]
[write,write,80,9]
[(,(,80,10]
[id,f2,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[},},81,3]
[;,;,81,4]
[},},82,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,83,4]
