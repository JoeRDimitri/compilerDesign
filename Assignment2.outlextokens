[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[<,<,1,1]
[id,START,1,6]
[>,>,1,7]
[:,:,1,9]
[:=,:=,1,11]
[<,<,1,13]
[id,prog,1,17]
[>,>,1,18]
[<,<,3,1]
[id,aParams,3,8]
[>,>,3,9]
[:,:,3,11]
[:=,:=,3,13]
[<,<,3,15]
[id,expr,3,19]
[>,>,3,20]
[<,<,3,22]
[id,rept,3,26]
[-,-,3,27]
[id,aParams1,3,35]
[>,>,3,36]
[<,<,4,1]
[id,aParams,4,8]
[>,>,4,9]
[:,:,4,11]
[:=,:=,4,13]
[id,EPSILON,4,21]
[<,<,6,1]
[id,aParamsTail,6,12]
[>,>,6,13]
[:,:,6,15]
[:=,:=,6,17]
[invalidchar,',6,19]
[,,,,6,20]
[invalidchar,',6,21]
[<,<,6,23]
[id,expr,6,27]
[>,>,6,28]
[<,<,8,1]
[id,addOp,8,6]
[>,>,8,7]
[:,:,8,9]
[:=,:=,8,11]
[invalidchar,',8,13]
[+,+,8,14]
[invalidchar,',8,15]
[<,<,9,1]
[id,addOp,9,6]
[>,>,9,7]
[:,:,9,9]
[:=,:=,9,11]
[invalidchar,',9,13]
[-,-,9,14]
[invalidchar,',9,15]
[<,<,10,1]
[id,addOp,10,6]
[>,>,10,7]
[:,:,10,9]
[:=,:=,10,11]
[invalidchar,'or',10,16]
[<,<,12,1]
[id,arithExpr,12,10]
[>,>,12,11]
[:,:,12,13]
[:=,:=,12,15]
[<,<,12,17]
[id,term,12,21]
[>,>,12,22]
[<,<,12,24]
[id,rightrec,12,32]
[-,-,12,33]
[id,arithExpr,12,42]
[>,>,12,43]
[<,<,14,1]
[id,arraySize,14,10]
[>,>,14,11]
[:,:,14,13]
[:=,:=,14,15]
[invalidchar,',14,17]
[[,[,14,18]
[invalidchar,',14,19]
[<,<,14,21]
[id,arraySize2,14,31]
[>,>,14,32]
[<,<,16,1]
[id,arraySize2,16,11]
[>,>,16,12]
[:,:,16,14]
[:=,:=,16,16]
[invalidchar,'intnum',16,25]
[invalidchar,',16,27]
[],],16,28]
[invalidchar,',16,29]
[<,<,17,1]
[id,arraySize2,17,11]
[>,>,17,12]
[:,:,17,14]
[:=,:=,17,16]
[invalidchar,',17,18]
[],],17,19]
[invalidchar,',17,20]
[<,<,19,1]
[id,assignOp,19,9]
[>,>,19,10]
[:,:,19,12]
[:=,:=,19,14]
[invalidchar,',19,16]
[:=,:=,19,18]
[invalidchar,',19,19]
[<,<,21,1]
[id,attributeDecl,21,14]
[>,>,21,15]
[:,:,21,17]
[:=,:=,21,19]
[invalidchar,'attribute',21,31]
[<,<,21,33]
[id,varDecl,21,40]
[>,>,21,41]
[<,<,23,1]
[id,classDecl,23,10]
[>,>,23,11]
[:,:,23,13]
[:=,:=,23,15]
[invalidchar,'class',23,23]
[invalidchar,'id',23,28]
[<,<,23,30]
[id,opt,23,33]
[-,-,23,34]
[id,classDecl2,23,44]
[>,>,23,45]
[invalidchar,',23,47]
[{,{,23,48]
[invalidchar,',23,49]
[<,<,23,51]
[id,rept,23,55]
[-,-,23,56]
[id,classDecl4,23,66]
[>,>,23,67]
[invalidchar,',23,69]
[},},23,70]
[invalidchar,',23,71]
[invalidchar,',23,73]
[;,;,23,74]
[invalidchar,',23,75]
[<,<,25,1]
[id,classOrImplOrFunc,25,18]
[>,>,25,19]
[:,:,25,21]
[:=,:=,25,23]
[<,<,25,25]
[id,classDecl,25,34]
[>,>,25,35]
[<,<,26,1]
[id,classOrImplOrFunc,26,18]
[>,>,26,19]
[:,:,26,21]
[:=,:=,26,23]
[<,<,26,25]
[id,implDef,26,32]
[>,>,26,33]
[<,<,27,1]
[id,classOrImplOrFunc,27,18]
[>,>,27,19]
[:,:,27,21]
[:=,:=,27,23]
[<,<,27,25]
[id,funcDef,27,32]
[>,>,27,33]
[<,<,29,1]
[id,expr,29,5]
[>,>,29,6]
[:,:,29,8]
[:=,:=,29,10]
[<,<,29,12]
[id,arithExpr,29,21]
[>,>,29,22]
[<,<,29,24]
[id,expr2,29,29]
[>,>,29,30]
[<,<,31,1]
[id,expr2,31,6]
[>,>,31,7]
[:,:,31,9]
[:=,:=,31,11]
[id,EPSILON,31,19]
[<,<,32,1]
[id,expr2,32,6]
[>,>,32,7]
[:,:,32,9]
[:=,:=,32,11]
[<,<,32,13]
[id,relOp,32,18]
[>,>,32,19]
[<,<,32,21]
[id,arithExpr,32,30]
[>,>,32,31]
[<,<,34,1]
[id,fParams,34,8]
[>,>,34,9]
[:,:,34,11]
[:=,:=,34,13]
[invalidchar,'id',34,18]
[invalidchar,',34,20]
[:,:,34,21]
[invalidchar,',34,22]
[<,<,34,24]
[id,type,34,28]
[>,>,34,29]
[<,<,34,31]
[id,rept,34,35]
[-,-,34,36]
[id,fParams3,34,44]
[>,>,34,45]
[<,<,34,47]
[id,rept,34,51]
[-,-,34,52]
[id,fParams4,34,60]
[>,>,34,61]
[<,<,35,1]
[id,fParams,35,8]
[>,>,35,9]
[:,:,35,11]
[:=,:=,35,13]
[id,EPSILON,35,21]
[<,<,37,1]
[id,fParamsTail,37,12]
[>,>,37,13]
[:,:,37,15]
[:=,:=,37,17]
[invalidchar,',37,19]
[,,,,37,20]
[invalidchar,',37,21]
[invalidchar,'id',37,26]
[invalidchar,',37,28]
[:,:,37,29]
[invalidchar,',37,30]
[<,<,37,32]
[id,type,37,36]
[>,>,37,37]
[<,<,37,39]
[id,rept,37,43]
[-,-,37,44]
[id,fParamsTail4,37,56]
[>,>,37,57]
[<,<,39,1]
[id,factor,39,7]
[>,>,39,8]
[:,:,39,10]
[:=,:=,39,12]
[<,<,39,14]
[id,rept,39,18]
[-,-,39,19]
[id,factor,39,25]
[>,>,39,26]
[<,<,40,1]
[id,factor,40,7]
[>,>,40,8]
[:,:,40,10]
[:=,:=,40,12]
[invalidchar,'intnum',40,21]
[<,<,41,1]
[id,factor,41,7]
[>,>,41,8]
[:,:,41,10]
[:=,:=,41,12]
[invalidchar,'floatnum',41,23]
[<,<,42,1]
[id,factor,42,7]
[>,>,42,8]
[:,:,42,10]
[:=,:=,42,12]
[invalidchar,',42,14]
[(,(,42,15]
[invalidchar,',42,16]
[<,<,42,18]
[id,arithExpr,42,27]
[>,>,42,28]
[invalidchar,',42,30]
[),),42,31]
[invalidchar,',42,32]
[<,<,43,1]
[id,factor,43,7]
[>,>,43,8]
[:,:,43,10]
[:=,:=,43,12]
[invalidchar,'not',43,18]
[<,<,43,20]
[id,factor,43,26]
[>,>,43,27]
[<,<,44,1]
[id,factor,44,7]
[>,>,44,8]
[:,:,44,10]
[:=,:=,44,12]
[<,<,44,14]
[id,sign,44,18]
[>,>,44,19]
[<,<,44,21]
[id,factor,44,27]
[>,>,44,28]
[<,<,46,1]
[id,rept,46,5]
[-,-,46,6]
[id,factor,46,12]
[>,>,46,13]
[:,:,46,15]
[:=,:=,46,17]
[invalidchar,'id',46,22]
[<,<,46,24]
[id,rept,46,28]
[-,-,46,29]
[id,factor2,46,36]
[>,>,46,37]
[<,<,47,1]
[id,rept,47,5]
[-,-,47,6]
[id,factor,47,12]
[>,>,47,13]
[:,:,47,15]
[:=,:=,47,17]
[invalidchar,'self',47,24]
[<,<,47,26]
[id,idnest2,47,33]
[>,>,47,34]
[<,<,47,36]
[id,rept,47,40]
[-,-,47,41]
[id,factor,47,47]
[>,>,47,48]
[<,<,49,1]
[id,rept,49,5]
[-,-,49,6]
[id,factor2,49,13]
[>,>,49,14]
[:,:,49,16]
[:=,:=,49,18]
[invalidchar,',49,20]
[(,(,49,21]
[invalidchar,',49,22]
[<,<,49,24]
[id,aParams,49,31]
[>,>,49,32]
[invalidchar,',49,34]
[),),49,35]
[invalidchar,',49,36]
[<,<,49,38]
[id,rept,49,42]
[-,-,49,43]
[id,factor3,49,50]
[>,>,49,51]
[<,<,50,1]
[id,rept,50,5]
[-,-,50,6]
[id,factor2,50,13]
[>,>,50,14]
[:,:,50,16]
[:=,:=,50,18]
[<,<,50,20]
[id,rept,50,24]
[-,-,50,25]
[id,variable2,50,34]
[>,>,50,35]
[<,<,50,37]
[id,rept,50,41]
[-,-,50,42]
[id,factor4,50,49]
[>,>,50,50]
[<,<,52,1]
[id,rept,52,5]
[-,-,52,6]
[id,factor3,52,13]
[>,>,52,14]
[:,:,52,16]
[:=,:=,52,18]
[invalidchar,',52,20]
[.,.,52,21]
[invalidchar,',52,22]
[<,<,52,24]
[id,rept,52,28]
[-,-,52,29]
[id,factor,52,35]
[>,>,52,36]
[<,<,53,1]
[id,rept,53,5]
[-,-,53,6]
[id,factor3,53,13]
[>,>,53,14]
[:,:,53,16]
[:=,:=,53,18]
[id,EPSILON,53,26]
[<,<,55,1]
[id,rept,55,5]
[-,-,55,6]
[id,factor4,55,13]
[>,>,55,14]
[:,:,55,16]
[:=,:=,55,18]
[invalidchar,',55,20]
[.,.,55,21]
[invalidchar,',55,22]
[<,<,55,24]
[id,rept,55,28]
[-,-,55,29]
[id,factor,55,35]
[>,>,55,36]
[<,<,56,1]
[id,rept,56,5]
[-,-,56,6]
[id,factor4,56,13]
[>,>,56,14]
[:,:,56,16]
[:=,:=,56,18]
[id,EPSILON,56,26]
[<,<,58,1]
[id,funcBody,58,9]
[>,>,58,10]
[:,:,58,12]
[:=,:=,58,14]
[invalidchar,',58,16]
[{,{,58,17]
[invalidchar,',58,18]
[<,<,58,20]
[id,rept,58,24]
[-,-,58,25]
[id,funcBody1,58,34]
[>,>,58,35]
[invalidchar,',58,37]
[},},58,38]
[invalidchar,',58,39]
[<,<,60,1]
[id,funcDecl,60,9]
[>,>,60,10]
[:,:,60,12]
[:=,:=,60,14]
[<,<,60,16]
[id,funcHead,60,24]
[>,>,60,25]
[invalidchar,',60,27]
[;,;,60,28]
[invalidchar,',60,29]
[<,<,62,1]
[id,funcDef,62,8]
[>,>,62,9]
[:,:,62,11]
[:=,:=,62,13]
[<,<,62,15]
[id,funcHead,62,23]
[>,>,62,24]
[<,<,62,26]
[id,funcBody,62,34]
[>,>,62,35]
[<,<,64,1]
[id,funcHead,64,9]
[>,>,64,10]
[:,:,64,12]
[:=,:=,64,14]
[invalidchar,'function',64,25]
[invalidchar,'id',64,30]
[invalidchar,',64,32]
[(,(,64,33]
[invalidchar,',64,34]
[<,<,64,36]
[id,fParams,64,43]
[>,>,64,44]
[invalidchar,',64,46]
[),),64,47]
[invalidchar,',64,48]
[invalidchar,',64,50]
[=>,=>,64,52]
[invalidchar,',64,53]
[<,<,64,55]
[id,returnType,64,65]
[>,>,64,66]
[<,<,65,1]
[id,funcHead,65,9]
[>,>,65,10]
[:,:,65,12]
[:=,:=,65,14]
[invalidchar,'constructor',65,28]
[invalidchar,',65,30]
[(,(,65,31]
[invalidchar,',65,32]
[<,<,65,34]
[id,fParams,65,41]
[>,>,65,42]
[invalidchar,',65,44]
[),),65,45]
[invalidchar,',65,46]
[<,<,67,1]
[id,idnest2,67,8]
[>,>,67,9]
[:,:,67,11]
[:=,:=,67,13]
[invalidchar,',67,15]
[(,(,67,16]
[invalidchar,',67,17]
[<,<,67,19]
[id,aParams,67,26]
[>,>,67,27]
[invalidchar,',67,29]
[),),67,30]
[invalidchar,',67,31]
[invalidchar,',67,33]
[.,.,67,34]
[invalidchar,',67,35]
[<,<,68,1]
[id,idnest2,68,8]
[>,>,68,9]
[:,:,68,11]
[:=,:=,68,13]
[<,<,68,15]
[id,rept,68,19]
[-,-,68,20]
[id,variable2,68,29]
[>,>,68,30]
[invalidchar,',68,32]
[.,.,68,33]
[invalidchar,',68,34]
[<,<,70,1]
[id,implDef,70,8]
[>,>,70,9]
[:,:,70,11]
[:=,:=,70,13]
[invalidchar,'implementation',70,30]
[invalidchar,'id',70,35]
[invalidchar,',70,37]
[{,{,70,38]
[invalidchar,',70,39]
[<,<,70,41]
[id,rept,70,45]
[-,-,70,46]
[id,implDef3,70,54]
[>,>,70,55]
[invalidchar,',70,57]
[},},70,58]
[invalidchar,',70,59]
[<,<,72,1]
[id,indice,72,7]
[>,>,72,8]
[:,:,72,10]
[:=,:=,72,12]
[invalidchar,',72,14]
[[,[,72,15]
[invalidchar,',72,16]
[<,<,72,18]
[id,arithExpr,72,27]
[>,>,72,28]
[invalidchar,',72,30]
[],],72,31]
[invalidchar,',72,32]
[<,<,74,1]
[id,localVarDecl,74,13]
[>,>,74,14]
[:,:,74,16]
[:=,:=,74,18]
[invalidchar,'local',74,26]
[<,<,74,28]
[id,varDecl,74,35]
[>,>,74,36]
[<,<,76,1]
[id,localVarDeclOrStat,76,19]
[>,>,76,20]
[:,:,76,22]
[:=,:=,76,24]
[<,<,76,26]
[id,localVarDecl,76,38]
[>,>,76,39]
[<,<,77,1]
[id,localVarDeclOrStat,77,19]
[>,>,77,20]
[:,:,77,22]
[:=,:=,77,24]
[<,<,77,26]
[id,statement,77,35]
[>,>,77,36]
[<,<,79,1]
[id,memberDecl,79,11]
[>,>,79,12]
[:,:,79,14]
[:=,:=,79,16]
[<,<,79,18]
[id,funcDecl,79,26]
[>,>,79,27]
[<,<,80,1]
[id,memberDecl,80,11]
[>,>,80,12]
[:,:,80,14]
[:=,:=,80,16]
[<,<,80,18]
[id,attributeDecl,80,31]
[>,>,80,32]
[<,<,82,1]
[id,multOp,82,7]
[>,>,82,8]
[:,:,82,10]
[:=,:=,82,12]
[invalidchar,',82,14]
[*,*,82,15]
[invalidchar,',82,16]
[<,<,83,1]
[id,multOp,83,7]
[>,>,83,8]
[:,:,83,10]
[:=,:=,83,12]
[invalidchar,',83,14]
[/,/,83,15]
[invalidchar,',83,16]
[<,<,84,1]
[id,multOp,84,7]
[>,>,84,8]
[:,:,84,10]
[:=,:=,84,12]
[invalidchar,'and',84,18]
[<,<,86,1]
[id,opt,86,4]
[-,-,86,5]
[id,classDecl2,86,15]
[>,>,86,16]
[:,:,86,18]
[:=,:=,86,20]
[invalidchar,'isa',86,26]
[invalidchar,'id',86,31]
[<,<,86,33]
[id,rept,86,37]
[-,-,86,38]
[id,opt,86,41]
[-,-,86,42]
[id,classDecl22,86,53]
[>,>,86,54]
[<,<,87,1]
[id,opt,87,4]
[-,-,87,5]
[id,classDecl2,87,15]
[>,>,87,16]
[:,:,87,18]
[:=,:=,87,20]
[id,EPSILON,87,28]
[<,<,89,1]
[id,prog,89,5]
[>,>,89,6]
[:,:,89,8]
[:=,:=,89,10]
[<,<,89,12]
[id,rept,89,16]
[-,-,89,17]
[id,prog0,89,22]
[>,>,89,23]
[<,<,91,1]
[id,relExpr,91,8]
[>,>,91,9]
[:,:,91,11]
[:=,:=,91,13]
[<,<,91,15]
[id,arithExpr,91,24]
[>,>,91,25]
[<,<,91,27]
[id,relOp,91,32]
[>,>,91,33]
[<,<,91,35]
[id,arithExpr,91,44]
[>,>,91,45]
[<,<,93,1]
[id,relOp,93,6]
[>,>,93,7]
[:,:,93,9]
[:=,:=,93,11]
[invalidchar,',93,13]
[==,==,93,15]
[invalidchar,',93,16]
[<,<,94,1]
[id,relOp,94,6]
[>,>,94,7]
[:,:,94,9]
[:=,:=,94,11]
[invalidchar,',94,13]
[<>,<>,94,15]
[invalidchar,',94,16]
[<,<,95,1]
[id,relOp,95,6]
[>,>,95,7]
[:,:,95,9]
[:=,:=,95,11]
[invalidchar,',95,13]
[<,<,95,14]
[invalidchar,',95,15]
[<,<,96,1]
[id,relOp,96,6]
[>,>,96,7]
[:,:,96,9]
[:=,:=,96,11]
[invalidchar,',96,13]
[>,>,96,14]
[invalidchar,',96,15]
[<,<,97,1]
[id,relOp,97,6]
[>,>,97,7]
[:,:,97,9]
[:=,:=,97,11]
[invalidchar,',97,13]
[<=,<=,97,15]
[invalidchar,',97,16]
[<,<,98,1]
[id,relOp,98,6]
[>,>,98,7]
[:,:,98,9]
[:=,:=,98,11]
[invalidchar,',98,13]
[>=,>=,98,15]
[invalidchar,',98,16]
[<,<,100,1]
[id,rept,100,5]
[-,-,100,6]
[id,aParams1,100,14]
[>,>,100,15]
[:,:,100,17]
[:=,:=,100,19]
[<,<,100,21]
[id,aParamsTail,100,32]
[>,>,100,33]
[<,<,100,35]
[id,rept,100,39]
[-,-,100,40]
[id,aParams1,100,48]
[>,>,100,49]
[<,<,101,1]
[id,rept,101,5]
[-,-,101,6]
[id,aParams1,101,14]
[>,>,101,15]
[:,:,101,17]
[:=,:=,101,19]
[id,EPSILON,101,27]
[<,<,103,1]
[id,rept,103,5]
[-,-,103,6]
[id,classDecl4,103,16]
[>,>,103,17]
[:,:,103,19]
[:=,:=,103,21]
[<,<,103,23]
[id,visibility,103,33]
[>,>,103,34]
[<,<,103,36]
[id,memberDecl,103,46]
[>,>,103,47]
[<,<,103,49]
[id,rept,103,53]
[-,-,103,54]
[id,classDecl4,103,64]
[>,>,103,65]
[<,<,104,1]
[id,rept,104,5]
[-,-,104,6]
[id,classDecl4,104,16]
[>,>,104,17]
[:,:,104,19]
[:=,:=,104,21]
[id,EPSILON,104,29]
[<,<,106,1]
[id,rept,106,5]
[-,-,106,6]
[id,fParams3,106,14]
[>,>,106,15]
[:,:,106,17]
[:=,:=,106,19]
[<,<,106,21]
[id,arraySize,106,30]
[>,>,106,31]
[<,<,106,33]
[id,rept,106,37]
[-,-,106,38]
[id,fParams3,106,46]
[>,>,106,47]
[<,<,107,1]
[id,rept,107,5]
[-,-,107,6]
[id,fParams3,107,14]
[>,>,107,15]
[:,:,107,17]
[:=,:=,107,19]
[id,EPSILON,107,27]
[<,<,109,1]
[id,rept,109,5]
[-,-,109,6]
[id,fParams4,109,14]
[>,>,109,15]
[:,:,109,17]
[:=,:=,109,19]
[<,<,109,21]
[id,fParamsTail,109,32]
[>,>,109,33]
[<,<,109,35]
[id,rept,109,39]
[-,-,109,40]
[id,fParams4,109,48]
[>,>,109,49]
[<,<,110,1]
[id,rept,110,5]
[-,-,110,6]
[id,fParams4,110,14]
[>,>,110,15]
[:,:,110,17]
[:=,:=,110,19]
[id,EPSILON,110,27]
[<,<,112,1]
[id,rept,112,5]
[-,-,112,6]
[id,fParamsTail4,112,18]
[>,>,112,19]
[:,:,112,21]
[:=,:=,112,23]
[<,<,112,25]
[id,arraySize,112,34]
[>,>,112,35]
[<,<,112,37]
[id,rept,112,41]
[-,-,112,42]
[id,fParamsTail4,112,54]
[>,>,112,55]
[<,<,113,1]
[id,rept,113,5]
[-,-,113,6]
[id,fParamsTail4,113,18]
[>,>,113,19]
[:,:,113,21]
[:=,:=,113,23]
[id,EPSILON,113,31]
[<,<,115,1]
[id,rept,115,5]
[-,-,115,6]
[id,funcBody1,115,15]
[>,>,115,16]
[:,:,115,18]
[:=,:=,115,20]
[<,<,115,22]
[id,localVarDeclOrStat,115,40]
[>,>,115,41]
[<,<,115,43]
[id,rept,115,47]
[-,-,115,48]
[id,funcBody1,115,57]
[>,>,115,58]
[<,<,116,1]
[id,rept,116,5]
[-,-,116,6]
[id,funcBody1,116,15]
[>,>,116,16]
[:,:,116,18]
[:=,:=,116,20]
[id,EPSILON,116,28]
[<,<,118,1]
[id,rept,118,5]
[-,-,118,6]
[id,implDef3,118,14]
[>,>,118,15]
[:,:,118,17]
[:=,:=,118,19]
[<,<,118,21]
[id,funcDef,118,28]
[>,>,118,29]
[<,<,118,31]
[id,rept,118,35]
[-,-,118,36]
[id,implDef3,118,44]
[>,>,118,45]
[<,<,119,1]
[id,rept,119,5]
[-,-,119,6]
[id,implDef3,119,14]
[>,>,119,15]
[:,:,119,17]
[:=,:=,119,19]
[id,EPSILON,119,27]
[<,<,121,1]
[id,rept,121,5]
[-,-,121,6]
[id,opt,121,9]
[-,-,121,10]
[id,classDecl22,121,21]
[>,>,121,22]
[:,:,121,24]
[:=,:=,121,26]
[invalidchar,',121,28]
[,,,,121,29]
[invalidchar,',121,30]
[invalidchar,'id',121,35]
[<,<,121,37]
[id,rept,121,41]
[-,-,121,42]
[id,opt,121,45]
[-,-,121,46]
[id,classDecl22,121,57]
[>,>,121,58]
[<,<,122,1]
[id,rept,122,5]
[-,-,122,6]
[id,opt,122,9]
[-,-,122,10]
[id,classDecl22,122,21]
[>,>,122,22]
[:,:,122,24]
[:=,:=,122,26]
[id,EPSILON,122,34]
[<,<,124,1]
[id,rept,124,5]
[-,-,124,6]
[id,prog0,124,11]
[>,>,124,12]
[:,:,124,14]
[:=,:=,124,16]
[<,<,124,18]
[id,classOrImplOrFunc,124,35]
[>,>,124,36]
[<,<,124,38]
[id,rept,124,42]
[-,-,124,43]
[id,prog0,124,48]
[>,>,124,49]
[<,<,125,1]
[id,rept,125,5]
[-,-,125,6]
[id,prog0,125,11]
[>,>,125,12]
[:,:,125,14]
[:=,:=,125,16]
[id,EPSILON,125,24]
[<,<,127,1]
[id,rept,127,5]
[-,-,127,6]
[id,statBlock1,127,16]
[>,>,127,17]
[:,:,127,19]
[:=,:=,127,21]
[<,<,127,23]
[id,statement,127,32]
[>,>,127,33]
[<,<,127,35]
[id,rept,127,39]
[-,-,127,40]
[id,statBlock1,127,50]
[>,>,127,51]
[<,<,128,1]
[id,rept,128,5]
[-,-,128,6]
[id,statBlock1,128,16]
[>,>,128,17]
[:,:,128,19]
[:=,:=,128,21]
[id,EPSILON,128,29]
[<,<,130,1]
[id,rept,130,5]
[-,-,130,6]
[id,varDecl3,130,14]
[>,>,130,15]
[:,:,130,17]
[:=,:=,130,19]
[<,<,130,21]
[id,arraySize,130,30]
[>,>,130,31]
[<,<,130,33]
[id,rept,130,37]
[-,-,130,38]
[id,varDecl3,130,46]
[>,>,130,47]
[<,<,131,1]
[id,rept,131,5]
[-,-,131,6]
[id,varDecl3,131,14]
[>,>,131,15]
[:,:,131,17]
[:=,:=,131,19]
[id,EPSILON,131,27]
[<,<,133,1]
[id,rept,133,5]
[-,-,133,6]
[id,variable2,133,15]
[>,>,133,16]
[:,:,133,18]
[:=,:=,133,20]
[<,<,133,22]
[id,indice,133,28]
[>,>,133,29]
[<,<,133,31]
[id,rept,133,35]
[-,-,133,36]
[id,variable2,133,45]
[>,>,133,46]
[<,<,134,1]
[id,rept,134,5]
[-,-,134,6]
[id,variable2,134,15]
[>,>,134,16]
[:,:,134,18]
[:=,:=,134,20]
[id,EPSILON,134,28]
[<,<,136,1]
[id,returnType,136,11]
[>,>,136,12]
[:,:,136,14]
[:=,:=,136,16]
[<,<,136,18]
[id,type,136,22]
[>,>,136,23]
[<,<,137,1]
[id,returnType,137,11]
[>,>,137,12]
[:,:,137,14]
[:=,:=,137,16]
[invalidchar,'void',137,23]
[<,<,139,1]
[id,rightrec,139,9]
[-,-,139,10]
[id,arithExpr,139,19]
[>,>,139,20]
[:,:,139,22]
[:=,:=,139,24]
[id,EPSILON,139,32]
[<,<,140,1]
[id,rightrec,140,9]
[-,-,140,10]
[id,arithExpr,140,19]
[>,>,140,20]
[:,:,140,22]
[:=,:=,140,24]
[<,<,140,26]
[id,addOp,140,31]
[>,>,140,32]
[<,<,140,34]
[id,term,140,38]
[>,>,140,39]
[<,<,140,41]
[id,rightrec,140,49]
[-,-,140,50]
[id,arithExpr,140,59]
[>,>,140,60]
[<,<,142,1]
[id,rightrec,142,9]
[-,-,142,10]
[id,term,142,14]
[>,>,142,15]
[:,:,142,17]
[:=,:=,142,19]
[id,EPSILON,142,27]
[<,<,143,1]
[id,rightrec,143,9]
[-,-,143,10]
[id,term,143,14]
[>,>,143,15]
[:,:,143,17]
[:=,:=,143,19]
[<,<,143,21]
[id,multOp,143,27]
[>,>,143,28]
[<,<,143,30]
[id,factor,143,36]
[>,>,143,37]
[<,<,143,39]
[id,rightrec,143,47]
[-,-,143,48]
[id,term,143,52]
[>,>,143,53]
[<,<,145,1]
[id,sign,145,5]
[>,>,145,6]
[:,:,145,8]
[:=,:=,145,10]
[invalidchar,',145,12]
[+,+,145,13]
[invalidchar,',145,14]
[<,<,146,1]
[id,sign,146,5]
[>,>,146,6]
[:,:,146,8]
[:=,:=,146,10]
[invalidchar,',146,12]
[-,-,146,13]
[invalidchar,',146,14]
[<,<,148,1]
[id,statBlock,148,10]
[>,>,148,11]
[:,:,148,13]
[:=,:=,148,15]
[invalidchar,',148,17]
[{,{,148,18]
[invalidchar,',148,19]
[<,<,148,21]
[id,rept,148,25]
[-,-,148,26]
[id,statBlock1,148,36]
[>,>,148,37]
[invalidchar,',148,39]
[},},148,40]
[invalidchar,',148,41]
[<,<,149,1]
[id,statBlock,149,10]
[>,>,149,11]
[:,:,149,13]
[:=,:=,149,15]
[<,<,149,17]
[id,statement,149,26]
[>,>,149,27]
[<,<,150,1]
[id,statBlock,150,10]
[>,>,150,11]
[:,:,150,13]
[:=,:=,150,15]
[id,EPSILON,150,23]
[<,<,152,1]
[id,statement,152,10]
[>,>,152,11]
[:,:,152,13]
[:=,:=,152,15]
[invalidchar,'if',152,20]
[invalidchar,',152,22]
[(,(,152,23]
[invalidchar,',152,24]
[<,<,152,26]
[id,relExpr,152,33]
[>,>,152,34]
[invalidchar,',152,36]
[),),152,37]
[invalidchar,',152,38]
[invalidchar,'then',152,45]
[<,<,152,47]
[id,statBlock,152,56]
[>,>,152,57]
[invalidchar,'else',152,64]
[<,<,152,66]
[id,statBlock,152,75]
[>,>,152,76]
[invalidchar,',152,78]
[;,;,152,79]
[invalidchar,',152,80]
[<,<,153,1]
[id,statement,153,10]
[>,>,153,11]
[:,:,153,13]
[:=,:=,153,15]
[invalidchar,'while',153,23]
[invalidchar,',153,25]
[(,(,153,26]
[invalidchar,',153,27]
[<,<,153,29]
[id,relExpr,153,36]
[>,>,153,37]
[invalidchar,',153,39]
[),),153,40]
[invalidchar,',153,41]
[<,<,153,43]
[id,statBlock,153,52]
[>,>,153,53]
[invalidchar,',153,55]
[;,;,153,56]
[invalidchar,',153,57]
[<,<,154,1]
[id,statement,154,10]
[>,>,154,11]
[:,:,154,13]
[:=,:=,154,15]
[invalidchar,'read',154,22]
[invalidchar,',154,24]
[(,(,154,25]
[invalidchar,',154,26]
[<,<,154,28]
[id,variable,154,36]
[>,>,154,37]
[invalidchar,',154,39]
[),),154,40]
[invalidchar,',154,41]
[invalidchar,',154,43]
[;,;,154,44]
[invalidchar,',154,45]
[<,<,155,1]
[id,statement,155,10]
[>,>,155,11]
[:,:,155,13]
[:=,:=,155,15]
[invalidchar,'write',155,23]
[invalidchar,',155,25]
[(,(,155,26]
[invalidchar,',155,27]
[<,<,155,29]
[id,expr,155,33]
[>,>,155,34]
[invalidchar,',155,36]
[),),155,37]
[invalidchar,',155,38]
[invalidchar,',155,40]
[;,;,155,41]
[invalidchar,',155,42]
[<,<,156,1]
[id,statement,156,10]
[>,>,156,11]
[:,:,156,13]
[:=,:=,156,15]
[invalidchar,'return',156,24]
[invalidchar,',156,26]
[(,(,156,27]
[invalidchar,',156,28]
[<,<,156,30]
[id,expr,156,34]
[>,>,156,35]
[invalidchar,',156,37]
[),),156,38]
[invalidchar,',156,39]
[invalidchar,',156,41]
[;,;,156,42]
[invalidchar,',156,43]
[<,<,157,1]
[id,statement,157,10]
[>,>,157,11]
[:,:,157,13]
[:=,:=,157,15]
[<,<,157,17]
[id,rept,157,21]
[-,-,157,22]
[id,statement,157,31]
[>,>,157,32]
[<,<,159,1]
[id,rept,159,5]
[-,-,159,6]
[id,statement,159,15]
[>,>,159,16]
[:,:,159,18]
[:=,:=,159,20]
[invalidchar,'self',159,27]
[<,<,159,29]
[id,idnest2,159,36]
[>,>,159,37]
[<,<,159,39]
[id,rept,159,43]
[-,-,159,44]
[id,statement,159,53]
[>,>,159,54]
[<,<,160,1]
[id,rept,160,5]
[-,-,160,6]
[id,statement,160,15]
[>,>,160,16]
[:,:,160,18]
[:=,:=,160,20]
[invalidchar,'id',160,25]
[<,<,160,27]
[id,rept,160,31]
[-,-,160,32]
[id,statement2,160,42]
[>,>,160,43]
[<,<,162,1]
[id,rept,162,5]
[-,-,162,6]
[id,statement2,162,16]
[>,>,162,17]
[:,:,162,19]
[:=,:=,162,21]
[<,<,162,23]
[id,rept,162,27]
[-,-,162,28]
[id,variable2,162,37]
[>,>,162,38]
[<,<,162,40]
[id,rept,162,44]
[-,-,162,45]
[id,statement4,162,55]
[>,>,162,56]
[<,<,163,1]
[id,rept,163,5]
[-,-,163,6]
[id,statement2,163,16]
[>,>,163,17]
[:,:,163,19]
[:=,:=,163,21]
[invalidchar,',163,23]
[(,(,163,24]
[invalidchar,',163,25]
[<,<,163,27]
[id,aParams,163,34]
[>,>,163,35]
[invalidchar,',163,37]
[),),163,38]
[invalidchar,',163,39]
[<,<,163,41]
[id,rept,163,45]
[-,-,163,46]
[id,statement3,163,56]
[>,>,163,57]
[<,<,165,1]
[id,rept,165,5]
[-,-,165,6]
[id,statement3,165,16]
[>,>,165,17]
[:,:,165,19]
[:=,:=,165,21]
[invalidchar,',165,23]
[.,.,165,24]
[invalidchar,',165,25]
[<,<,165,27]
[id,rept,165,31]
[-,-,165,32]
[id,statement,165,41]
[>,>,165,42]
[<,<,166,1]
[id,rept,166,5]
[-,-,166,6]
[id,statement3,166,16]
[>,>,166,17]
[:,:,166,19]
[:=,:=,166,21]
[invalidchar,',166,23]
[;,;,166,24]
[invalidchar,',166,25]
[<,<,168,1]
[id,rept,168,5]
[-,-,168,6]
[id,statement4,168,16]
[>,>,168,17]
[:,:,168,19]
[:=,:=,168,21]
[invalidchar,',168,23]
[.,.,168,24]
[invalidchar,',168,25]
[<,<,168,27]
[id,rept,168,31]
[-,-,168,32]
[id,statement,168,41]
[>,>,168,42]
[<,<,169,1]
[id,rept,169,5]
[-,-,169,6]
[id,statement4,169,16]
[>,>,169,17]
[:,:,169,19]
[:=,:=,169,21]
[<,<,169,23]
[id,assignOp,169,31]
[>,>,169,32]
[<,<,169,34]
[id,expr,169,38]
[>,>,169,39]
[invalidchar,',169,41]
[;,;,169,42]
[invalidchar,',169,43]
[<,<,171,1]
[id,term,171,5]
[>,>,171,6]
[:,:,171,8]
[:=,:=,171,10]
[<,<,171,12]
[id,factor,171,18]
[>,>,171,19]
[<,<,171,21]
[id,rightrec,171,29]
[-,-,171,30]
[id,term,171,34]
[>,>,171,35]
[<,<,173,1]
[id,type,173,5]
[>,>,173,6]
[:,:,173,8]
[:=,:=,173,10]
[invalidchar,'int',173,16]
[<,<,174,1]
[id,type,174,5]
[>,>,174,6]
[:,:,174,8]
[:=,:=,174,10]
[invalidchar,'float',174,18]
[<,<,175,1]
[id,type,175,5]
[>,>,175,6]
[:,:,175,8]
[:=,:=,175,10]
[invalidchar,'id',175,15]
[<,<,177,1]
[id,varDecl,177,8]
[>,>,177,9]
[:,:,177,11]
[:=,:=,177,13]
[invalidchar,'id',177,18]
[invalidchar,',177,20]
[:,:,177,21]
[invalidchar,',177,22]
[<,<,177,24]
[id,type,177,28]
[>,>,177,29]
[<,<,177,31]
[id,rept,177,35]
[-,-,177,36]
[id,varDecl3,177,44]
[>,>,177,45]
[invalidchar,',177,47]
[;,;,177,48]
[invalidchar,',177,49]
[<,<,179,1]
[id,variable,179,9]
[>,>,179,10]
[:,:,179,12]
[:=,:=,179,14]
[invalidchar,'self',179,21]
[<,<,179,23]
[id,idnest2,179,30]
[>,>,179,31]
[<,<,179,33]
[id,variable,179,41]
[>,>,179,42]
[<,<,180,1]
[id,variable,180,9]
[>,>,180,10]
[:,:,180,12]
[:=,:=,180,14]
[invalidchar,'id',180,19]
[<,<,180,21]
[id,variable2,180,30]
[>,>,180,31]
[<,<,182,1]
[id,variable2,182,10]
[>,>,182,11]
[:,:,182,13]
[:=,:=,182,15]
[<,<,182,17]
[id,rept,182,21]
[-,-,182,22]
[id,variable2,182,31]
[>,>,182,32]
[<,<,182,34]
[id,variable3,182,43]
[>,>,182,44]
[<,<,183,1]
[id,variable2,183,10]
[>,>,183,11]
[:,:,183,13]
[:=,:=,183,15]
[invalidchar,',183,17]
[(,(,183,18]
[invalidchar,',183,19]
[<,<,183,21]
[id,aParams,183,28]
[>,>,183,29]
[invalidchar,',183,31]
[),),183,32]
[invalidchar,',183,33]
[invalidchar,',183,35]
[.,.,183,36]
[invalidchar,',183,37]
[<,<,183,39]
[id,variable,183,47]
[>,>,183,48]
[<,<,185,1]
[id,variable3,185,10]
[>,>,185,11]
[:,:,185,13]
[:=,:=,185,15]
[id,EPSILON,185,23]
[<,<,186,1]
[id,variable3,186,10]
[>,>,186,11]
[:,:,186,13]
[:=,:=,186,15]
[invalidchar,',186,17]
[.,.,186,18]
[invalidchar,',186,19]
[<,<,186,21]
[id,variable,186,29]
[>,>,186,30]
[<,<,188,1]
[id,visibility,188,11]
[>,>,188,12]
[:,:,188,14]
[:=,:=,188,16]
[invalidchar,'public',188,25]
[<,<,189,1]
[id,visibility,189,11]
[>,>,189,12]
[:,:,189,14]
[:=,:=,189,16]
[invalidchar,'private',189,26]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[;,;,4,12]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
