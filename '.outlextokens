[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[{,{,2,18]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[class,class,1,5]
[id,POLYNOMIAL,1,16]
[-,-,1,18]
[-,-,1,19]
[-,-,1,20]
[-,-,1,21]
[-,-,1,22]
[-,-,1,23]
[{,{,1,25]
[write,write,2,9]
[(,(,2,10]
[id,f1,2,12]
[.,.,2,13]
[id,f2,2,15]
[.,.,2,16]
[id,evaluate,2,24]
[(,(,2,25]
[id,counter,2,32]
[),),2,33]
[),),2,34]
[;,;,2,35]
[},},3,5]
[;,;,3,6]
[function,function,1,8]
[id,main,1,13]
[(,(,1,14]
[),),1,15]
[=>,=>,1,18]
[void,void,1,23]
[{,{,2,1]
[write,write,3,9]
[(,(,3,10]
[id,f1,3,12]
[.,.,3,13]
[id,f2,3,15]
[.,.,3,16]
[id,evaluate,3,24]
[(,(,3,25]
[id,counter,3,32]
[),),3,33]
[),),3,34]
[;,;,3,35]
[},},4,1]
[function,function,1,8]
[id,main,1,13]
[(,(,1,14]
[),),1,15]
[=>,=>,1,18]
[void,void,1,23]
[{,{,2,1]
[write,write,3,9]
[(,(,3,10]
[id,f1,3,12]
[.,.,3,13]
[id,f2,3,15]
[.,.,3,16]
[id,evaluate,3,24]
[(,(,3,25]
[id,counter,3,32]
[),),3,33]
[),),3,34]
[;,;,3,35]
[},},4,1]
[function,function,1,8]
[id,main,1,13]
[(,(,1,14]
[),),1,15]
[=>,=>,1,18]
[void,void,1,23]
[{,{,2,1]
[write,write,3,9]
[(,(,3,10]
[id,f1,3,12]
[.,.,3,13]
[id,f2,3,15]
[.,.,3,16]
[id,evaluate,3,24]
[(,(,3,25]
[id,counter,3,32]
[),),3,33]
[),),3,34]
[;,;,3,35]
[},},4,1]
[function,function,1,8]
[id,main,1,13]
[(,(,1,14]
[),),1,15]
[=>,=>,1,18]
[void,void,1,23]
[{,{,2,1]
[write,write,3,9]
[(,(,3,10]
[id,f1,3,12]
[.,.,3,13]
[id,f2,3,15]
[.,.,3,16]
[id,evaluate,3,24]
[(,(,3,25]
[id,counter,3,32]
[),),3,33]
[),),3,34]
[;,;,3,35]
[},},4,1]
[function,function,1,8]
[id,main,1,13]
[(,(,1,14]
[),),1,15]
[=>,=>,1,18]
[void,void,1,23]
[{,{,2,1]
[write,write,3,9]
[(,(,3,10]
[id,f1,3,12]
[.,.,3,13]
[id,f2,3,15]
[.,.,3,16]
[id,evaluate,3,24]
[(,(,3,25]
[id,counter,3,32]
[),),3,33]
[),),3,34]
[;,;,3,35]
[},},4,1]
[function,function,1,8]
[id,main,1,13]
[(,(,1,14]
[),),1,15]
[=>,=>,1,18]
[void,void,1,23]
[{,{,2,1]
[write,write,3,9]
[(,(,3,10]
[id,f1,3,12]
[.,.,3,13]
[id,f2,3,15]
[.,.,3,16]
[id,evaluate,3,24]
[(,(,3,25]
[id,counter,3,32]
[),),3,33]
[),),3,34]
[;,;,3,35]
[},},4,1]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[int,int,4,14]
[;,;,4,15]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[int,int,4,14]
[;,;,4,15]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[int,int,4,14]
[;,;,4,15]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[int,int,4,14]
[;,;,4,15]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[int,int,4,14]
[;,;,4,15]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[blockcmt,/* sort the array */,1,20]
[function,function,2,8]
[id,bubbleSort,2,19]
[(,(,2,20]
[id,arr,2,23]
[:,:,2,24]
[int,int,2,28]
[[,[,2,29]
[],],2,30]
[,,,,2,31]
[id,size,2,36]
[:,:,2,37]
[int,int,2,41]
[),),2,42]
[=>,=>,2,45]
[void,void,2,50]
[{,{,3,1]
[local,local,4,7]
[id,n,4,9]
[:,:,4,10]
[int,int,4,14]
[;,;,4,15]
[local,local,5,7]
[id,i,5,9]
[:,:,5,10]
[int,int,5,14]
[;,;,5,15]
[local,local,6,7]
[id,j,6,9]
[:,:,6,10]
[int,int,6,14]
[;,;,6,15]
[local,local,7,7]
[id,temp,7,12]
[:,:,7,13]
[int,int,7,17]
[;,;,7,18]
[id,n,8,3]
[:=,:=,8,6]
[id,size,8,11]
[;,;,8,12]
[id,i,9,3]
[:=,:=,9,6]
[intnum,0,9,8]
[;,;,9,9]
[id,j,10,3]
[:=,:=,10,6]
[intnum,0,10,8]
[;,;,10,9]
[id,temp,11,6]
[:=,:=,11,9]
[intnum,0,11,11]
[;,;,11,12]
[while,while,12,7]
[(,(,12,9]
[id,i,12,10]
[<,<,12,12]
[id,n,12,14]
[-,-,12,15]
[intnum,1,12,16]
[),),12,17]
[{,{,12,19]
[while,while,13,9]
[(,(,13,11]
[id,j,13,12]
[<,<,13,14]
[id,n,13,16]
[-,-,13,17]
[id,i,13,18]
[-,-,13,19]
[intnum,1,13,20]
[),),13,21]
[{,{,13,23]
[if,if,14,8]
[(,(,14,10]
[id,arr,14,13]
[[,[,14,14]
[id,j,14,15]
[],],14,16]
[>,>,14,18]
[id,arr,14,22]
[[,[,14,23]
[id,j,14,24]
[+,+,14,25]
[intnum,1,14,26]
[],],14,27]
[),),14,28]
[then,then,15,12]
[{,{,15,14]
[linecomment,// swap temp and arr[i],16,33]
[id,temp,17,14]
[:=,:=,17,17]
[id,arr,17,21]
[[,[,17,22]
[id,j,17,23]
[],],17,24]
[;,;,17,25]
[id,arr,18,13]
[[,[,18,14]
[id,j,18,15]
[],],18,16]
[:=,:=,18,19]
[id,arr,18,23]
[[,[,18,24]
[id,j,18,25]
[+,+,18,26]
[intnum,1,18,27]
[],],18,28]
[;,;,18,29]
[id,arr,19,13]
[[,[,19,14]
[id,j,19,15]
[+,+,19,16]
[intnum,1,19,17]
[],],19,18]
[:=,:=,19,21]
[id,temp,19,26]
[;,;,19,27]
[},},20,9]
[else,else,20,14]
[;,;,20,16]
[id,j,21,9]
[:=,:=,21,12]
[id,j,21,14]
[+,+,21,15]
[intnum,1,21,16]
[;,;,21,17]
[},},22,7]
[;,;,22,8]
[id,i,23,5]
[:=,:=,23,8]
[id,i,23,10]
[+,+,23,11]
[intnum,1,23,12]
[;,;,23,13]
[},},24,3]
[;,;,24,4]
[},},25,1]
[blockcmt,/* print the array */,27,21]
[function,function,28,8]
[id,printArray,28,19]
[(,(,28,20]
[id,arr,28,23]
[:,:,28,24]
[int,int,28,28]
[[,[,28,29]
[],],28,30]
[,,,,28,31]
[id,size,28,36]
[:,:,28,37]
[int,int,28,41]
[),),28,42]
[=>,=>,28,45]
[void,void,28,50]
[{,{,29,1]
[local,local,30,7]
[id,n,30,9]
[:,:,30,10]
[int,int,30,14]
[;,;,30,15]
[local,local,31,7]
[id,i,31,9]
[:,:,31,10]
[int,int,31,14]
[;,;,31,15]
[id,n,32,3]
[:=,:=,32,6]
[id,size,32,11]
[;,;,32,12]
[id,i,33,3]
[:=,:=,33,6]
[intnum,0,33,8]
[;,;,33,9]
[while,while,34,7]
[(,(,34,9]
[id,i,34,10]
[<,<,34,11]
[id,n,34,12]
[),),34,13]
[{,{,34,15]
[write,write,35,9]
[(,(,35,10]
[id,arr,35,13]
[[,[,35,14]
[id,i,35,15]
[],],35,16]
[),),35,17]
[;,;,35,18]
[id,i,36,7]
[:=,:=,36,10]
[id,i,36,12]
[+,+,36,13]
[intnum,1,36,14]
[;,;,36,15]
[},},37,3]
[;,;,37,4]
[},},38,1]
[linecomment,// main funtion to test above,40,29]
[function,function,41,8]
[id,main,41,13]
[(,(,41,14]
[),),41,15]
[=>,=>,41,18]
[void,void,41,23]
[{,{,42,1]
[local,local,43,7]
[id,arr,43,11]
[:,:,43,12]
[int,int,43,16]
[[,[,43,17]
[intnum,7,43,18]
[],],43,19]
[;,;,43,20]
[id,arr,44,5]
[[,[,44,6]
[intnum,0,44,7]
[],],44,8]
[:=,:=,44,11]
[intnum,64,44,14]
[;,;,44,15]
[id,arr,45,5]
[[,[,45,6]
[intnum,1,45,7]
[],],45,8]
[:=,:=,45,11]
[intnum,34,45,14]
[;,;,45,15]
[id,arr,46,5]
[[,[,46,6]
[intnum,2,46,7]
[],],46,8]
[:=,:=,46,11]
[intnum,25,46,14]
[;,;,46,15]
[id,arr,47,5]
[[,[,47,6]
[intnum,3,47,7]
[],],47,8]
[:=,:=,47,11]
[intnum,12,47,14]
[;,;,47,15]
[id,arr,48,5]
[[,[,48,6]
[intnum,4,48,7]
[],],48,8]
[:=,:=,48,11]
[intnum,22,48,14]
[;,;,48,15]
[id,arr,49,5]
[[,[,49,6]
[intnum,5,49,7]
[],],49,8]
[:=,:=,49,11]
[intnum,11,49,14]
[;,;,49,15]
[id,arr,50,5]
[[,[,50,6]
[intnum,6,50,7]
[],],50,8]
[:=,:=,50,11]
[intnum,90,50,14]
[;,;,50,15]
[id,printarray,51,12]
[(,(,51,13]
[id,arr,51,16]
[,,,,51,17]
[intnum,7,51,19]
[),),51,20]
[;,;,51,21]
[id,bubbleSort,52,12]
[(,(,52,13]
[id,arr,52,16]
[,,,,52,17]
[intnum,7,52,19]
[),),52,20]
[;,;,52,21]
[id,printarray,53,12]
[(,(,53,13]
[id,arr,53,16]
[,,,,53,17]
[intnum,7,53,19]
[),),53,20]
[;,;,53,21]
[},},54,1]
[blockcmt,/*    classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*/,56,3269]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},11,1]
[;,;,11,2]
[class,class,13,5]
[id,QUADRATIC,13,15]
[isa,isa,13,19]
[id,POLYNOMIAL,13,30]
[{,{,13,32]
[private,private,14,8]
[attribute,attribute,14,18]
[id,a,14,20]
[:,:,14,21]
[float,float,14,27]
[;,;,14,28]
[private,private,15,8]
[attribute,attribute,15,18]
[id,b,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,c,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[public,public,17,7]
[function,function,17,17]
[id,build,17,23]
[(,(,17,24]
[id,A,17,25]
[:,:,17,26]
[float,float,17,32]
[,,,,17,33]
[id,B,17,35]
[:,:,17,36]
[float,float,17,42]
[,,,,17,43]
[id,C,17,45]
[:,:,17,46]
[float,float,17,52]
[),),17,53]
[=>,=>,17,56]
[id,QUADRATIC,17,66]
[;,;,17,67]
[public,public,18,7]
[function,function,18,17]
[id,evaluate,18,26]
[(,(,18,27]
[id,x,18,28]
[:,:,18,29]
[float,float,18,35]
[),),18,36]
[=>,=>,18,39]
[float,float,18,45]
[;,;,18,46]
[},},19,1]
[;,;,19,2]
[linecomment,// ====== struct implementations ====== //,21,42]
[implementation,implementation,22,14]
[id,POLYNOMIAL,22,25]
[{,{,22,27]
[function,function,23,10]
[id,evaluate,23,19]
[(,(,23,20]
[id,x,23,21]
[:,:,23,22]
[float,float,23,28]
[),),23,29]
[=>,=>,23,32]
[float,float,23,38]
[{,{,24,3]
[return,return,25,10]
[(,(,25,12]
[intnum,0,25,13]
[),),25,14]
[;,;,25,15]
[},},26,3]
[},},27,1]
[implementation,implementation,29,14]
[id,QUADRATIC,29,24]
[{,{,29,26]
[function,function,30,10]
[id,evaluate,30,19]
[(,(,30,20]
[id,x,30,21]
[:,:,30,22]
[float,float,30,28]
[),),30,29]
[=>,=>,30,32]
[float,float,30,38]
[{,{,31,3]
[local,local,32,9]
[id,result,32,16]
[:,:,32,17]
[float,float,32,23]
[;,;,32,24]
[linecomment,//Using Horner's method,33,27]
[id,result,34,10]
[:=,:=,34,13]
[id,a,34,15]
[;,;,34,16]
[id,result,35,10]
[:=,:=,35,13]
[id,result,35,20]
[*,*,35,22]
[id,x,35,24]
[+,+,35,26]
[id,b,35,28]
[;,;,35,29]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,c,36,28]
[;,;,36,29]
[return,return,37,10]
[(,(,37,12]
[id,result,37,18]
[),),37,19]
[;,;,37,20]
[},},38,3]
[function,function,39,10]
[id,build,39,16]
[(,(,39,17]
[id,A,39,18]
[:,:,39,19]
[float,float,39,25]
[,,,,39,26]
[id,B,39,28]
[:,:,39,29]
[float,float,39,35]
[,,,,39,36]
[id,C,39,38]
[:,:,39,39]
[float,float,39,45]
[),),39,46]
[=>,=>,39,49]
[id,QUADRATIC,39,59]
[{,{,40,3]
[local,local,41,9]
[id,new_function,41,22]
[:,:,41,23]
[id,QUADRATIC,41,33]
[;,;,41,35]
[id,new_function,42,16]
[.,.,42,17]
[id,a,42,18]
[:=,:=,42,21]
[id,A,42,23]
[;,;,42,24]
[id,new_function,43,16]
[.,.,43,17]
[id,b,43,18]
[:=,:=,43,21]
[id,B,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,c,44,18]
[:=,:=,44,21]
[id,C,44,23]
[;,;,44,24]
[return,return,45,10]
[(,(,45,12]
[id,new_function,45,24]
[),),45,25]
[;,;,45,26]
[},},46,3]
[},},47,1]
[implementation,implementation,49,14]
[id,LINEAR,49,21]
[{,{,49,23]
[function,function,50,10]
[id,build,50,16]
[(,(,50,17]
[id,A,50,18]
[:,:,50,19]
[float,float,50,25]
[,,,,50,26]
[id,B,50,28]
[:,:,50,29]
[float,float,50,35]
[),),50,36]
[=>,=>,50,39]
[id,LINEAR,50,46]
[{,{,51,3]
[local,local,52,9]
[id,new_function,52,22]
[:,:,52,23]
[id,LINEAR,52,30]
[;,;,52,31]
[id,new_function,53,16]
[.,.,53,17]
[id,a,53,18]
[:=,:=,53,21]
[id,A,53,23]
[;,;,53,24]
[id,new_function,54,16]
[.,.,54,17]
[id,b,54,18]
[:=,:=,54,21]
[id,B,54,23]
[;,;,54,24]
[return,return,55,10]
[(,(,55,12]
[id,new_function,55,24]
[),),55,25]
[;,;,55,26]
[},},56,3]
[function,function,57,10]
[id,evaluate,57,19]
[(,(,57,20]
[id,x,57,21]
[:,:,57,22]
[float,float,57,28]
[),),57,29]
[=>,=>,57,32]
[float,float,57,38]
[{,{,58,3]
[local,local,59,9]
[id,result,59,16]
[:,:,59,17]
[float,float,59,23]
[;,;,59,24]
[id,result,60,10]
[:=,:=,60,13]
[floatnum,0.0,60,17]
[;,;,60,18]
[id,result,61,10]
[:=,:=,61,13]
[id,a,61,15]
[*,*,61,17]
[id,x,61,19]
[+,+,61,21]
[id,b,61,23]
[;,;,61,24]
[return,return,62,10]
[(,(,62,12]
[id,result,62,18]
[),),62,19]
[;,;,62,20]
[},},63,3]
[},},64,1]
[linecomment,// ====== main ====== //,66,24]
[function,function,67,8]
[id,main,67,13]
[(,(,67,14]
[),),67,15]
[=>,=>,67,18]
[void,void,67,23]
[{,{,68,1]
[local,local,69,7]
[id,f1,69,10]
[:,:,69,11]
[id,LINEAR,69,18]
[;,;,69,19]
[local,local,70,7]
[id,f2,70,10]
[:,:,70,11]
[id,QUADRATIC,70,21]
[;,;,70,22]
[local,local,71,7]
[id,counter,71,15]
[:,:,71,16]
[int,int,71,20]
[;,;,71,21]
[id,f1,72,4]
[:=,:=,72,7]
[id,f1,72,10]
[.,.,72,11]
[id,build,72,16]
[(,(,72,17]
[intnum,2,72,18]
[,,,,72,19]
[floatnum,3.5,72,23]
[),),72,24]
[;,;,72,25]
[id,f2,73,4]
[:=,:=,73,7]
[id,f2,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[-,-,73,18]
[intnum,2,73,19]
[,,,,73,20]
[intnum,1,73,22]
[,,,,73,23]
[intnum,0,73,25]
[),),73,26]
[;,;,73,27]
[id,counter,74,9]
[:=,:=,74,12]
[intnum,1,74,14]
[;,;,74,15]
[while,while,76,7]
[(,(,76,8]
[id,counter,76,15]
[<=,<=,76,18]
[intnum,10,76,21]
[),),76,22]
[{,{,77,3]
[write,write,78,9]
[(,(,78,10]
[id,f1,78,12]
[.,.,78,13]
[id,f2,78,15]
[.,.,78,16]
[id,evaluate,78,24]
[(,(,78,25]
[id,counter,78,32]
[),),78,33]
[),),78,34]
[;,;,78,35]
[write,write,79,9]
[(,(,79,10]
[id,counter,79,17]
[),),79,18]
[;,;,79,19]
[write,write,80,9]
[(,(,80,10]
[id,f1,80,12]
[.,.,80,13]
[id,evaluate,80,21]
[(,(,80,22]
[id,counter,80,29]
[),),80,30]
[),),80,31]
[;,;,80,32]
[write,write,81,9]
[(,(,81,10]
[id,f2,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[},},82,3]
[;,;,82,4]
[},},83,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,84,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[class,class,11,6]
[id,POLYNOMIAL,11,17]
[-,-,11,19]
[-,-,11,20]
[-,-,11,21]
[-,-,11,22]
[-,-,11,23]
[-,-,11,24]
[{,{,11,26]
[public,public,12,7]
[function,function,12,16]
[id,evaluate,12,25]
[(,(,12,26]
[id,x,12,27]
[:,:,12,28]
[float,float,12,34]
[),),12,35]
[=>,=>,12,38]
[float,float,12,44]
[;,;,12,45]
[},},13,1]
[;,;,13,2]
[},},15,1]
[;,;,15,2]
[class,class,17,5]
[id,QUADRATIC,17,15]
[isa,isa,17,19]
[id,POLYNOMIAL,17,30]
[{,{,17,32]
[private,private,18,8]
[attribute,attribute,18,18]
[id,a,18,20]
[:,:,18,21]
[float,float,18,27]
[;,;,18,28]
[private,private,19,8]
[attribute,attribute,19,18]
[id,b,19,20]
[:,:,19,21]
[float,float,19,27]
[;,;,19,28]
[private,private,20,8]
[attribute,attribute,20,18]
[id,c,20,20]
[:,:,20,21]
[float,float,20,27]
[;,;,20,28]
[public,public,21,7]
[function,function,21,17]
[id,build,21,23]
[(,(,21,24]
[id,A,21,25]
[:,:,21,26]
[float,float,21,32]
[,,,,21,33]
[id,B,21,35]
[:,:,21,36]
[float,float,21,42]
[,,,,21,43]
[id,C,21,45]
[:,:,21,46]
[float,float,21,52]
[),),21,53]
[=>,=>,21,56]
[id,QUADRATIC,21,66]
[;,;,21,67]
[public,public,22,7]
[function,function,22,17]
[id,evaluate,22,26]
[(,(,22,27]
[id,x,22,28]
[:,:,22,29]
[float,float,22,35]
[),),22,36]
[=>,=>,22,39]
[float,float,22,45]
[;,;,22,46]
[},},23,1]
[;,;,23,2]
[linecomment,// ====== struct implementations ====== //,25,42]
[implementation,implementation,26,14]
[id,POLYNOMIAL,26,25]
[{,{,26,27]
[function,function,27,10]
[id,evaluate,27,19]
[(,(,27,20]
[id,x,27,21]
[:,:,27,22]
[float,float,27,28]
[),),27,29]
[=>,=>,27,32]
[float,float,27,38]
[{,{,28,3]
[return,return,29,10]
[(,(,29,12]
[intnum,0,29,13]
[),),29,14]
[;,;,29,15]
[},},30,3]
[},},31,1]
[implementation,implementation,33,14]
[id,QUADRATIC,33,24]
[{,{,33,26]
[function,function,34,10]
[id,evaluate,34,19]
[(,(,34,20]
[id,x,34,21]
[:,:,34,22]
[float,float,34,28]
[),),34,29]
[=>,=>,34,32]
[float,float,34,38]
[{,{,35,3]
[local,local,36,9]
[id,result,36,16]
[:,:,36,17]
[float,float,36,23]
[;,;,36,24]
[linecomment,//Using Horner's method,37,27]
[id,result,38,10]
[:=,:=,38,13]
[id,a,38,15]
[;,;,38,16]
[id,result,39,10]
[:=,:=,39,13]
[id,result,39,20]
[*,*,39,22]
[id,x,39,24]
[+,+,39,26]
[id,b,39,28]
[;,;,39,29]
[id,result,40,10]
[:=,:=,40,13]
[id,result,40,20]
[*,*,40,22]
[id,x,40,24]
[+,+,40,26]
[id,c,40,28]
[;,;,40,29]
[return,return,41,10]
[(,(,41,12]
[id,result,41,18]
[),),41,19]
[;,;,41,20]
[},},42,3]
[function,function,43,10]
[id,build,43,16]
[(,(,43,17]
[id,A,43,18]
[:,:,43,19]
[float,float,43,25]
[,,,,43,26]
[id,B,43,28]
[:,:,43,29]
[float,float,43,35]
[,,,,43,36]
[id,C,43,38]
[:,:,43,39]
[float,float,43,45]
[),),43,46]
[=>,=>,43,49]
[id,QUADRATIC,43,59]
[{,{,44,3]
[local,local,45,9]
[id,new_function,45,22]
[:,:,45,23]
[id,QUADRATIC,45,33]
[;,;,45,35]
[id,new_function,46,16]
[.,.,46,17]
[id,a,46,18]
[:=,:=,46,21]
[id,A,46,23]
[;,;,46,24]
[id,new_function,47,16]
[.,.,47,17]
[id,b,47,18]
[:=,:=,47,21]
[id,B,47,23]
[;,;,47,24]
[id,new_function,48,16]
[.,.,48,17]
[id,c,48,18]
[:=,:=,48,21]
[id,C,48,23]
[;,;,48,24]
[return,return,49,10]
[(,(,49,12]
[id,new_function,49,24]
[),),49,25]
[;,;,49,26]
[},},50,3]
[},},51,1]
[implementation,implementation,53,14]
[id,LINEAR,53,21]
[{,{,53,23]
[function,function,54,10]
[id,build,54,16]
[(,(,54,17]
[id,A,54,18]
[:,:,54,19]
[float,float,54,25]
[,,,,54,26]
[id,B,54,28]
[:,:,54,29]
[float,float,54,35]
[),),54,36]
[=>,=>,54,39]
[id,LINEAR,54,46]
[{,{,55,3]
[local,local,56,9]
[id,new_function,56,22]
[:,:,56,23]
[id,LINEAR,56,30]
[;,;,56,31]
[id,new_function,57,16]
[.,.,57,17]
[id,a,57,18]
[:=,:=,57,21]
[id,A,57,23]
[;,;,57,24]
[id,new_function,58,16]
[.,.,58,17]
[id,b,58,18]
[:=,:=,58,21]
[id,B,58,23]
[;,;,58,24]
[return,return,59,10]
[(,(,59,12]
[id,new_function,59,24]
[),),59,25]
[;,;,59,26]
[},},60,3]
[function,function,61,10]
[id,evaluate,61,19]
[(,(,61,20]
[id,x,61,21]
[:,:,61,22]
[float,float,61,28]
[),),61,29]
[=>,=>,61,32]
[float,float,61,38]
[{,{,62,3]
[local,local,63,9]
[id,result,63,16]
[:,:,63,17]
[float,float,63,23]
[;,;,63,24]
[id,result,64,10]
[:=,:=,64,13]
[floatnum,0.0,64,17]
[;,;,64,18]
[id,result,65,10]
[:=,:=,65,13]
[id,a,65,15]
[*,*,65,17]
[id,x,65,19]
[+,+,65,21]
[id,b,65,23]
[;,;,65,24]
[return,return,66,10]
[(,(,66,12]
[id,result,66,18]
[),),66,19]
[;,;,66,20]
[},},67,3]
[},},68,1]
[linecomment,// ====== main ====== //,70,24]
[function,function,71,8]
[id,main,71,13]
[(,(,71,14]
[),),71,15]
[=>,=>,71,18]
[void,void,71,23]
[{,{,72,1]
[local,local,73,7]
[id,f1,73,10]
[:,:,73,11]
[id,LINEAR,73,18]
[;,;,73,19]
[local,local,74,7]
[id,f2,74,10]
[:,:,74,11]
[id,QUADRATIC,74,21]
[;,;,74,22]
[local,local,75,7]
[id,counter,75,15]
[:,:,75,16]
[int,int,75,20]
[;,;,75,21]
[id,f1,76,4]
[:=,:=,76,7]
[id,f1,76,10]
[.,.,76,11]
[id,build,76,16]
[(,(,76,17]
[intnum,2,76,18]
[,,,,76,19]
[floatnum,3.5,76,23]
[),),76,24]
[;,;,76,25]
[id,f2,77,4]
[:=,:=,77,7]
[id,f2,77,10]
[.,.,77,11]
[id,build,77,16]
[(,(,77,17]
[-,-,77,18]
[intnum,2,77,19]
[,,,,77,20]
[intnum,1,77,22]
[,,,,77,23]
[intnum,0,77,25]
[),),77,26]
[;,;,77,27]
[id,counter,78,9]
[:=,:=,78,12]
[intnum,1,78,14]
[;,;,78,15]
[while,while,80,7]
[(,(,80,8]
[id,counter,80,15]
[<=,<=,80,18]
[intnum,10,80,21]
[),),80,22]
[{,{,81,3]
[write,write,82,9]
[(,(,82,10]
[id,f1,82,12]
[.,.,82,13]
[id,f2,82,15]
[.,.,82,16]
[id,evaluate,82,24]
[(,(,82,25]
[id,counter,82,32]
[),),82,33]
[),),82,34]
[;,;,82,35]
[write,write,83,9]
[(,(,83,10]
[id,counter,83,17]
[),),83,18]
[;,;,83,19]
[write,write,84,9]
[(,(,84,10]
[id,f1,84,12]
[.,.,84,13]
[id,evaluate,84,21]
[(,(,84,22]
[id,counter,84,29]
[),),84,30]
[),),84,31]
[;,;,84,32]
[write,write,85,9]
[(,(,85,10]
[id,f2,85,12]
[.,.,85,13]
[id,evaluate,85,21]
[(,(,85,22]
[id,counter,85,29]
[),),85,30]
[),),85,31]
[;,;,85,32]
[},},86,3]
[;,;,86,4]
[},},87,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,88,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[class,class,11,6]
[id,POLYNOMIAL,11,17]
[-,-,11,19]
[-,-,11,20]
[-,-,11,21]
[-,-,11,22]
[-,-,11,23]
[-,-,11,24]
[{,{,11,26]
[public,public,12,7]
[function,function,12,16]
[id,evaluate,12,25]
[(,(,12,26]
[id,x,12,27]
[:,:,12,28]
[float,float,12,34]
[),),12,35]
[=>,=>,12,38]
[float,float,12,44]
[;,;,12,45]
[},},13,1]
[;,;,13,2]
[},},15,1]
[;,;,15,2]
[class,class,17,5]
[id,QUADRATIC,17,15]
[isa,isa,17,19]
[id,POLYNOMIAL,17,30]
[{,{,17,32]
[private,private,18,8]
[attribute,attribute,18,18]
[id,a,18,20]
[:,:,18,21]
[float,float,18,27]
[;,;,18,28]
[private,private,19,8]
[attribute,attribute,19,18]
[id,b,19,20]
[:,:,19,21]
[float,float,19,27]
[;,;,19,28]
[private,private,20,8]
[attribute,attribute,20,18]
[id,c,20,20]
[:,:,20,21]
[float,float,20,27]
[;,;,20,28]
[public,public,21,7]
[function,function,21,17]
[id,build,21,23]
[(,(,21,24]
[id,A,21,25]
[:,:,21,26]
[float,float,21,32]
[,,,,21,33]
[id,B,21,35]
[:,:,21,36]
[float,float,21,42]
[,,,,21,43]
[id,C,21,45]
[:,:,21,46]
[float,float,21,52]
[),),21,53]
[=>,=>,21,56]
[id,QUADRATIC,21,66]
[;,;,21,67]
[public,public,22,7]
[function,function,22,17]
[id,evaluate,22,26]
[(,(,22,27]
[id,x,22,28]
[:,:,22,29]
[float,float,22,35]
[),),22,36]
[=>,=>,22,39]
[float,float,22,45]
[;,;,22,46]
[},},23,1]
[;,;,23,2]
[linecomment,// ====== struct implementations ====== //,25,42]
[implementation,implementation,26,14]
[id,POLYNOMIAL,26,25]
[{,{,26,27]
[function,function,27,10]
[id,evaluate,27,19]
[(,(,27,20]
[id,x,27,21]
[:,:,27,22]
[float,float,27,28]
[),),27,29]
[=>,=>,27,32]
[float,float,27,38]
[{,{,28,3]
[return,return,29,10]
[(,(,29,12]
[intnum,0,29,13]
[),),29,14]
[;,;,29,15]
[},},30,3]
[},},31,1]
[implementation,implementation,33,14]
[id,QUADRATIC,33,24]
[{,{,33,26]
[function,function,34,10]
[id,evaluate,34,19]
[(,(,34,20]
[id,x,34,21]
[:,:,34,22]
[float,float,34,28]
[),),34,29]
[=>,=>,34,32]
[float,float,34,38]
[{,{,35,3]
[local,local,36,9]
[id,result,36,16]
[:,:,36,17]
[float,float,36,23]
[;,;,36,24]
[linecomment,//Using Horner's method,37,27]
[id,result,38,10]
[:=,:=,38,13]
[id,a,38,15]
[;,;,38,16]
[id,result,39,10]
[:=,:=,39,13]
[id,result,39,20]
[*,*,39,22]
[id,x,39,24]
[+,+,39,26]
[id,b,39,28]
[;,;,39,29]
[id,result,40,10]
[:=,:=,40,13]
[id,result,40,20]
[*,*,40,22]
[id,x,40,24]
[+,+,40,26]
[id,c,40,28]
[;,;,40,29]
[return,return,41,10]
[(,(,41,12]
[id,result,41,18]
[),),41,19]
[;,;,41,20]
[},},42,3]
[function,function,43,10]
[id,build,43,16]
[(,(,43,17]
[id,A,43,18]
[:,:,43,19]
[float,float,43,25]
[,,,,43,26]
[id,B,43,28]
[:,:,43,29]
[float,float,43,35]
[,,,,43,36]
[id,C,43,38]
[:,:,43,39]
[float,float,43,45]
[),),43,46]
[=>,=>,43,49]
[id,QUADRATIC,43,59]
[{,{,44,3]
[local,local,45,9]
[id,new_function,45,22]
[:,:,45,23]
[id,QUADRATIC,45,33]
[;,;,45,35]
[id,new_function,46,16]
[.,.,46,17]
[id,a,46,18]
[:=,:=,46,21]
[id,A,46,23]
[;,;,46,24]
[id,new_function,47,16]
[.,.,47,17]
[id,b,47,18]
[:=,:=,47,21]
[id,B,47,23]
[;,;,47,24]
[id,new_function,48,16]
[.,.,48,17]
[id,c,48,18]
[:=,:=,48,21]
[id,C,48,23]
[;,;,48,24]
[return,return,49,10]
[(,(,49,12]
[id,new_function,49,24]
[),),49,25]
[;,;,49,26]
[},},50,3]
[},},51,1]
[implementation,implementation,53,14]
[id,LINEAR,53,21]
[{,{,53,23]
[function,function,54,10]
[id,build,54,16]
[(,(,54,17]
[id,A,54,18]
[:,:,54,19]
[float,float,54,25]
[,,,,54,26]
[id,B,54,28]
[:,:,54,29]
[float,float,54,35]
[),),54,36]
[=>,=>,54,39]
[id,LINEAR,54,46]
[{,{,55,3]
[local,local,56,9]
[id,new_function,56,22]
[:,:,56,23]
[id,LINEAR,56,30]
[;,;,56,31]
[id,new_function,57,16]
[.,.,57,17]
[id,a,57,18]
[:=,:=,57,21]
[id,A,57,23]
[;,;,57,24]
[id,new_function,58,16]
[.,.,58,17]
[id,b,58,18]
[:=,:=,58,21]
[id,B,58,23]
[;,;,58,24]
[return,return,59,10]
[(,(,59,12]
[id,new_function,59,24]
[),),59,25]
[;,;,59,26]
[},},60,3]
[function,function,61,10]
[id,evaluate,61,19]
[(,(,61,20]
[id,x,61,21]
[:,:,61,22]
[float,float,61,28]
[),),61,29]
[=>,=>,61,32]
[float,float,61,38]
[{,{,62,3]
[local,local,63,9]
[id,result,63,16]
[:,:,63,17]
[float,float,63,23]
[;,;,63,24]
[id,result,64,10]
[:=,:=,64,13]
[floatnum,0.0,64,17]
[;,;,64,18]
[id,result,65,10]
[:=,:=,65,13]
[id,a,65,15]
[*,*,65,17]
[id,x,65,19]
[+,+,65,21]
[id,b,65,23]
[;,;,65,24]
[return,return,66,10]
[(,(,66,12]
[id,result,66,18]
[),),66,19]
[;,;,66,20]
[},},67,3]
[},},68,1]
[linecomment,// ====== main ====== //,70,24]
[function,function,71,8]
[id,main,71,13]
[(,(,71,14]
[),),71,15]
[=>,=>,71,18]
[void,void,71,23]
[{,{,72,1]
[local,local,73,7]
[id,f1,73,10]
[:,:,73,11]
[id,LINEAR,73,18]
[;,;,73,19]
[local,local,74,7]
[id,f2,74,10]
[:,:,74,11]
[id,QUADRATIC,74,21]
[;,;,74,22]
[local,local,75,7]
[id,counter,75,15]
[:,:,75,16]
[int,int,75,20]
[;,;,75,21]
[id,f1,76,4]
[:=,:=,76,7]
[id,f1,76,10]
[.,.,76,11]
[id,build,76,16]
[(,(,76,17]
[intnum,2,76,18]
[,,,,76,19]
[floatnum,3.5,76,23]
[),),76,24]
[;,;,76,25]
[id,f2,77,4]
[:=,:=,77,7]
[id,f2,77,10]
[.,.,77,11]
[id,build,77,16]
[(,(,77,17]
[-,-,77,18]
[intnum,2,77,19]
[,,,,77,20]
[intnum,1,77,22]
[,,,,77,23]
[intnum,0,77,25]
[),),77,26]
[;,;,77,27]
[id,counter,78,9]
[:=,:=,78,12]
[intnum,1,78,14]
[;,;,78,15]
[while,while,80,7]
[(,(,80,8]
[id,counter,80,15]
[<=,<=,80,18]
[intnum,10,80,21]
[),),80,22]
[{,{,81,3]
[write,write,82,9]
[(,(,82,10]
[id,f1,82,12]
[.,.,82,13]
[id,f2,82,15]
[.,.,82,16]
[id,evaluate,82,24]
[(,(,82,25]
[id,counter,82,32]
[),),82,33]
[),),82,34]
[;,;,82,35]
[write,write,83,9]
[(,(,83,10]
[id,counter,83,17]
[),),83,18]
[;,;,83,19]
[write,write,84,9]
[(,(,84,10]
[id,f1,84,12]
[.,.,84,13]
[id,evaluate,84,21]
[(,(,84,22]
[id,counter,84,29]
[),),84,30]
[),),84,31]
[;,;,84,32]
[write,write,85,9]
[(,(,85,10]
[id,f2,85,12]
[.,.,85,13]
[id,evaluate,85,21]
[(,(,85,22]
[id,counter,85,29]
[),),85,30]
[),),85,31]
[;,;,85,32]
[},},86,3]
[;,;,86,4]
[},},87,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,88,4]
[linecomment,// ====== struct declarations ====== //,1,39]
[class,class,2,5]
[id,POLYNOMIAL,2,16]
[-,-,2,18]
[-,-,2,19]
[-,-,2,20]
[-,-,2,21]
[-,-,2,22]
[-,-,2,23]
[{,{,2,25]
[public,public,3,7]
[function,function,3,16]
[id,evaluate,3,25]
[(,(,3,26]
[id,x,3,27]
[:,:,3,28]
[float,float,3,34]
[),),3,35]
[=>,=>,3,38]
[float,float,3,44]
[;,;,3,45]
[},},4,1]
[;,;,4,2]
[class,class,6,5]
[id,LINEAR,6,12]
[isa,isa,6,16]
[id,POLYNOMIAL,6,27]
[{,{,6,29]
[private,private,7,8]
[attribute,attribute,7,18]
[id,a,7,20]
[:,:,7,21]
[float,float,7,27]
[;,;,7,28]
[private,private,8,8]
[attribute,attribute,8,18]
[id,b,8,20]
[:,:,8,21]
[float,float,8,27]
[;,;,8,28]
[public,public,9,7]
[function,function,9,17]
[id,build,9,23]
[(,(,9,24]
[id,A,9,25]
[:,:,9,26]
[float,float,9,32]
[,,,,9,33]
[id,B,9,35]
[:,:,9,36]
[float,float,9,42]
[),),9,43]
[=>,=>,9,46]
[id,LINEAR,9,53]
[;,;,9,54]
[public,public,10,7]
[function,function,10,17]
[id,evaluate,10,26]
[(,(,10,27]
[id,x,10,28]
[:,:,10,29]
[float,float,10,35]
[),),10,36]
[=>,=>,10,39]
[float,float,10,45]
[;,;,10,46]
[},},12,1]
[;,;,12,2]
[class,class,14,5]
[id,QUADRATIC,14,15]
[isa,isa,14,19]
[id,POLYNOMIAL,14,30]
[{,{,14,32]
[private,private,15,8]
[attribute,attribute,15,18]
[id,a,15,20]
[:,:,15,21]
[float,float,15,27]
[;,;,15,28]
[private,private,16,8]
[attribute,attribute,16,18]
[id,b,16,20]
[:,:,16,21]
[float,float,16,27]
[;,;,16,28]
[private,private,17,8]
[attribute,attribute,17,18]
[id,c,17,20]
[:,:,17,21]
[float,float,17,27]
[;,;,17,28]
[public,public,18,7]
[function,function,18,17]
[id,build,18,23]
[(,(,18,24]
[id,A,18,25]
[:,:,18,26]
[float,float,18,32]
[,,,,18,33]
[id,B,18,35]
[:,:,18,36]
[float,float,18,42]
[,,,,18,43]
[id,C,18,45]
[:,:,18,46]
[float,float,18,52]
[),),18,53]
[=>,=>,18,56]
[id,QUADRATIC,18,66]
[;,;,18,67]
[public,public,19,7]
[function,function,19,17]
[id,evaluate,19,26]
[(,(,19,27]
[id,x,19,28]
[:,:,19,29]
[float,float,19,35]
[),),19,36]
[=>,=>,19,39]
[float,float,19,45]
[;,;,19,46]
[},},20,1]
[;,;,20,2]
[linecomment,// ====== struct implementations ====== //,22,42]
[implementation,implementation,23,14]
[id,POLYNOMIAL,23,25]
[{,{,23,27]
[function,function,24,10]
[id,evaluate,24,19]
[(,(,24,20]
[id,x,24,21]
[:,:,24,22]
[float,float,24,28]
[),),24,29]
[=>,=>,24,32]
[float,float,24,38]
[{,{,25,3]
[return,return,26,10]
[(,(,26,12]
[intnum,0,26,13]
[),),26,14]
[;,;,26,15]
[},},27,3]
[},},28,1]
[implementation,implementation,30,14]
[id,QUADRATIC,30,24]
[{,{,30,26]
[function,function,31,10]
[id,evaluate,31,19]
[(,(,31,20]
[id,x,31,21]
[:,:,31,22]
[float,float,31,28]
[),),31,29]
[=>,=>,31,32]
[float,float,31,38]
[{,{,32,3]
[local,local,33,9]
[id,result,33,16]
[:,:,33,17]
[float,float,33,23]
[;,;,33,24]
[linecomment,//Using Horner's method,34,27]
[id,result,35,10]
[:=,:=,35,13]
[id,a,35,15]
[;,;,35,16]
[id,result,36,10]
[:=,:=,36,13]
[id,result,36,20]
[*,*,36,22]
[id,x,36,24]
[+,+,36,26]
[id,b,36,28]
[;,;,36,29]
[id,result,37,10]
[:=,:=,37,13]
[id,result,37,20]
[*,*,37,22]
[id,x,37,24]
[+,+,37,26]
[id,c,37,28]
[;,;,37,29]
[return,return,38,10]
[(,(,38,12]
[id,result,38,18]
[),),38,19]
[;,;,38,20]
[},},39,3]
[function,function,40,10]
[id,build,40,16]
[(,(,40,17]
[id,A,40,18]
[:,:,40,19]
[float,float,40,25]
[,,,,40,26]
[id,B,40,28]
[:,:,40,29]
[float,float,40,35]
[,,,,40,36]
[id,C,40,38]
[:,:,40,39]
[float,float,40,45]
[),),40,46]
[=>,=>,40,49]
[id,QUADRATIC,40,59]
[{,{,41,3]
[local,local,42,9]
[id,new_function,42,22]
[:,:,42,23]
[id,QUADRATIC,42,33]
[;,;,42,35]
[id,new_function,43,16]
[.,.,43,17]
[id,a,43,18]
[:=,:=,43,21]
[id,A,43,23]
[;,;,43,24]
[id,new_function,44,16]
[.,.,44,17]
[id,b,44,18]
[:=,:=,44,21]
[id,B,44,23]
[;,;,44,24]
[id,new_function,45,16]
[.,.,45,17]
[id,c,45,18]
[:=,:=,45,21]
[id,C,45,23]
[;,;,45,24]
[return,return,46,10]
[(,(,46,12]
[id,new_function,46,24]
[),),46,25]
[;,;,46,26]
[},},47,3]
[},},48,1]
[implementation,implementation,50,14]
[id,LINEAR,50,21]
[{,{,50,23]
[function,function,51,10]
[id,build,51,16]
[(,(,51,17]
[id,A,51,18]
[:,:,51,19]
[float,float,51,25]
[,,,,51,26]
[id,B,51,28]
[:,:,51,29]
[float,float,51,35]
[),),51,36]
[=>,=>,51,39]
[id,LINEAR,51,46]
[{,{,52,3]
[local,local,53,9]
[id,new_function,53,22]
[:,:,53,23]
[id,LINEAR,53,30]
[;,;,53,31]
[id,new_function,54,16]
[.,.,54,17]
[id,a,54,18]
[:=,:=,54,21]
[id,A,54,23]
[;,;,54,24]
[id,new_function,55,16]
[.,.,55,17]
[id,b,55,18]
[:=,:=,55,21]
[id,B,55,23]
[;,;,55,24]
[return,return,56,10]
[(,(,56,12]
[id,new_function,56,24]
[),),56,25]
[;,;,56,26]
[},},57,3]
[function,function,58,10]
[id,evaluate,58,19]
[(,(,58,20]
[id,x,58,21]
[:,:,58,22]
[float,float,58,28]
[),),58,29]
[=>,=>,58,32]
[float,float,58,38]
[{,{,59,3]
[local,local,60,9]
[id,result,60,16]
[:,:,60,17]
[float,float,60,23]
[;,;,60,24]
[id,result,61,10]
[:=,:=,61,13]
[floatnum,0.0,61,17]
[;,;,61,18]
[id,result,62,10]
[:=,:=,62,13]
[id,a,62,15]
[*,*,62,17]
[id,x,62,19]
[+,+,62,21]
[id,b,62,23]
[;,;,62,24]
[return,return,63,10]
[(,(,63,12]
[id,result,63,18]
[),),63,19]
[;,;,63,20]
[},},64,3]
[},},65,1]
[linecomment,// ====== main ====== //,67,24]
[function,function,68,8]
[id,main,68,13]
[(,(,68,14]
[),),68,15]
[=>,=>,68,18]
[void,void,68,23]
[{,{,69,1]
[local,local,70,7]
[id,f1,70,10]
[:,:,70,11]
[id,LINEAR,70,18]
[;,;,70,19]
[local,local,71,7]
[id,f2,71,10]
[:,:,71,11]
[id,QUADRATIC,71,21]
[;,;,71,22]
[local,local,72,7]
[id,counter,72,15]
[:,:,72,16]
[int,int,72,20]
[;,;,72,21]
[id,f1,73,4]
[:=,:=,73,7]
[id,f1,73,10]
[.,.,73,11]
[id,build,73,16]
[(,(,73,17]
[intnum,2,73,18]
[,,,,73,19]
[floatnum,3.5,73,23]
[),),73,24]
[;,;,73,25]
[id,f2,74,4]
[:=,:=,74,7]
[id,f2,74,10]
[.,.,74,11]
[id,build,74,16]
[(,(,74,17]
[-,-,74,18]
[intnum,2,74,19]
[,,,,74,20]
[intnum,1,74,22]
[,,,,74,23]
[intnum,0,74,25]
[),),74,26]
[;,;,74,27]
[id,counter,75,9]
[:=,:=,75,12]
[intnum,1,75,14]
[;,;,75,15]
[while,while,77,7]
[(,(,77,8]
[id,counter,77,15]
[<=,<=,77,18]
[intnum,10,77,21]
[),),77,22]
[{,{,78,3]
[write,write,79,9]
[(,(,79,10]
[id,f1,79,12]
[.,.,79,13]
[id,f2,79,15]
[.,.,79,16]
[id,evaluate,79,24]
[(,(,79,25]
[id,counter,79,32]
[),),79,33]
[),),79,34]
[;,;,79,35]
[write,write,80,9]
[(,(,80,10]
[id,counter,80,17]
[),),80,18]
[;,;,80,19]
[write,write,81,9]
[(,(,81,10]
[id,f1,81,12]
[.,.,81,13]
[id,evaluate,81,21]
[(,(,81,22]
[id,counter,81,29]
[),),81,30]
[),),81,31]
[;,;,81,32]
[write,write,82,9]
[(,(,82,10]
[id,f2,82,12]
[.,.,82,13]
[id,evaluate,82,21]
[(,(,82,22]
[id,counter,82,29]
[),),82,30]
[),),82,31]
[;,;,82,32]
[},},83,3]
[;,;,83,4]
[},},84,1]
[blockcmt,/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/,85,4]
